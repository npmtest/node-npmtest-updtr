{"/home/travis/build/npmtest/node-npmtest-updtr/test.js":"/* istanbul instrument in package npmtest_updtr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-updtr/lib.npmtest_updtr.js":"/* istanbul instrument in package npmtest_updtr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_updtr = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_updtr = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-updtr/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-updtr && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_updtr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_updtr\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_updtr.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_updtr.rollup.js'] =\n            local.assetsDict['/assets.npmtest_updtr.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_updtr.__dirname + '/lib.npmtest_updtr.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-updtr/node_modules/updtr/lib/index.js":"\"use strict\";\n\nvar run = require(\"./run.js\");\n\nexports.run = run;\nexports.reporters = require(\"./reporters\");\n","/home/travis/build/npmtest/node-npmtest-updtr/node_modules/updtr/lib/run.js":"\"use strict\";\n\nvar async = require(\"async\");\nvar childProcess = require(\"child_process\");\nvar filter = require(\"./filter\");\nvar EventEmitter = require(\"./EventEmitter.js\");\nvar fs = require(\"fs\");\nvar path = require(\"path\");\n\nvar defaultTestCmdNpm = \"npm test\";\nvar defaultTestCmdYarn = \"yarn test\";\n\nfunction run(config, done) {\n    var emitter = new EventEmitter();\n    var testCmd;\n    var reporter;\n\n    function exec(cmd, cb) {\n        childProcess.exec(cmd, { maxBuffer: Infinity, encoding: \"utf8\", cwd: config.cwd }, cb);\n    }\n\n    function finish(err) {\n        emitter.removeAllListeners();\n        done(err || null);\n    }\n\n    if (typeof config.cwd !== \"string\") {\n        throw new Error(\"Cannot run updtr: cwd missing\");\n    }\n\n    sanitizeConfig(config);\n\n    if (config.registry && config.useYarn) {\n        throw new Error(\"`yarn add` does not support custom registries yet. Please use a .npmrc file to achieve this.\");\n    }\n\n    reporter = config.reporter;\n    testCmd = config.testCmd;\n\n    reporter(emitter);\n\n    emitter.emit(\"init\", {\n        cwd: config.cwd\n    });\n    exec(config.useYarn ? \"yarn outdated --json --flat\" : \"npm outdated --json --long --depth=0\", function (err, stdout) {\n        var missing;\n        var outdated;\n        var infos = [];\n        var tasks;\n\n        function createTask(info, index) {\n            return function (done) {\n                var event = {\n                    current: index + 1, // index is zero-based\n                    total: tasks.length,\n                    info: info,\n                    testCmd: testCmd,\n                    installCmd: (config.useYarn ? \"yarn add\" : \"npm i\") + (config.registry ? (\" --registry \" + config.registry) : \"\")\n                };\n                var testStdout;\n                var installCmd;\n\n                if (!config.useYarn && config.saveExact) {\n                    event.installCmd += \" --save-exact\";\n                }\n\n                installCmd = event.installCmd + \" \" + info.name + \"@\" + info.updateTo + \" \" + info.saveCmd;\n\n                emitter.emit(\"updating\", event);\n\n                async.series({\n                    deleteOldVersion: async.apply(exec, (config.useYarn ? \"yarn remove \" : \"npm remove \") + info.name + \" \" + info.saveCmd),\n                    installNewVersion: async.apply(exec, installCmd),\n                    emitTestingEvent: function (done) {\n                        emitter.emit(\"testing\", event);\n                        setImmediate(done);\n                    },\n                    runTests: function runTests(callback) {\n                        exec(testCmd, function (err, stdout, stderr) {\n                            if (err) {\n                                testStdout = stdout;\n                                callback(err);\n                                return;\n                            }\n                            callback(null, stdout, stderr);\n                        });\n                    }\n                }, function (err) {\n                    if (err) {\n                        emitter.emit(\"rollback\", event);\n                        exec(event.installCmd + \" \" + info.name + \"@\" + info.current + \" \" + info.saveCmd + (config.saveExact ? \" --save-exact\" : \"\"), function (err) {\n                            if (err) {\n                                finish(err);\n                                return;\n                            }\n                            emitter.emit(\"rollbackDone\", event);\n                            if (config.testStdout) {\n                                event.testStdout = testStdout;\n                                emitter.emit(\"testStdout\", event);\n                            }\n                            done();\n                        });\n                        return;\n                    }\n                    emitter.emit(\"updatingDone\", event);\n                    done();\n                });\n            };\n        }\n\n        if (err && err.code > 1) {\n            finish(err);\n            return;\n        }\n\n        if (!stdout) {\n            emitter.emit(\"noop\");\n            finish();\n            return;\n        }\n\n        outdated = JSON.parse(stdout);\n        if (config.useYarn) {\n            if (\"data\" in outdated && outdated.data.body instanceof Array) {\n                infos = outdated.data.body.map(function (info) {\n                    return {\n                        name: info[0],\n                        current: info[1],\n                        saveCmd: info[4] === \"devDependencies\" ? \"--dev\" : \"\",\n                        type: info[4],\n                        wanted: info[2],\n                        latest: info[3],\n                        updateTo: config.wanted ? info[2] : info[3]\n                    };\n                });\n            }\n        } else {\n            infos = Object.keys(outdated)\n            .map(function (moduleName) {\n                var info = outdated[moduleName];\n\n                info.name = moduleName;\n                info.saveCmd = info.type === \"devDependencies\" ? \"--save-dev\" : \"--save\";\n                info.updateTo = config.wanted ? info.wanted : info.latest;\n\n                return info;\n            });\n        }\n\n        infos = infos.filter(filter(config));\n\n        missing = modulesMissing(infos);\n        if (missing.length > 0) {\n            emitter.emit(\"modulesMissing\", {\n                infos: missing\n            });\n            finish();\n            return;\n        }\n\n        if (infos.length === 0) {\n            emitter.emit(\"noop\");\n            finish();\n            return;\n        }\n\n        emitter.emit(\"outdated\", {\n            infos: infos,\n            total: infos.length\n        });\n\n        tasks = infos\n            .map(createTask);\n\n        async.series(tasks, function (err) {\n            if (err) {\n                finish(err);\n                return;\n            }\n            emitter.emit(\"finished\");\n            finish();\n        });\n    });\n}\n\nfunction modulesMissing(infos) {\n    return infos.filter(function (info) {\n        return !info.current;\n    });\n}\n\nfunction sanitizeConfig(config) {\n    config.useYarn = fs.existsSync(path.resolve(config.cwd, \"yarn.lock\"));\n    config.reporter = config.reporter || Function.prototype;\n    config.testCmd = config.testCmd || (config.useYarn ? defaultTestCmdYarn : defaultTestCmdNpm);\n    config.exclude = config.exclude && config.exclude.split(\",\").map(function (name) {\n        return name.trim();\n    }) || [];\n}\n\nmodule.exports = run;\n","/home/travis/build/npmtest/node-npmtest-updtr/node_modules/updtr/lib/filter.js":"\"use strict\";\n\nvar semver = require(\"semver\");\n\nfunction isExoticDependency(info) {\n    return [\"git\", \"exotic\"].indexOf(info.latest) !== -1;\n}\n\nfunction isAlreadyInstalled(info) {\n    return info.updateTo === info.current;\n}\n\nfunction isUnstable(info) {\n    // Check for hyphen in version string as this is a prerelease version according to SemVer\n    return Boolean(info.updateTo && info.updateTo.indexOf(\"-\") !== -1);\n}\n\nfunction isExcluded(info, exclude) {\n    return exclude.map(function (name) {\n        return name.trim();\n    }).indexOf(info.name) !== -1;\n}\n\nfunction isCurrentGreaterThanUpdateTo(info) {\n    return Boolean(info.current && info.updateTo !== \"git\" && semver.gt(info.current, info.updateTo));\n}\n\nfunction filter(config) {\n    return function (info) {\n        return isExoticDependency(info) === false &&\n            isAlreadyInstalled(info) === false &&\n            isUnstable(info) === false &&\n            isExcluded(info, config.exclude) === false &&\n            isCurrentGreaterThanUpdateTo(info) === false;\n    };\n}\n\nmodule.exports = filter;\n","/home/travis/build/npmtest/node-npmtest-updtr/node_modules/updtr/lib/EventEmitter.js":"\"use strict\";\n\nvar events = require(\"events\");\nvar EventEmitter = events;\n\nif (typeof EventEmitter !== \"function\") {\n    EventEmitter = events.EventEmitter;\n}\n\nmodule.exports = EventEmitter;\n","/home/travis/build/npmtest/node-npmtest-updtr/node_modules/updtr/lib/reporters/index.js":"\"use strict\";\n\nmodule.exports = {\n    default: require(\"./default.js\"),\n    shy: require(\"./shy.js\"),\n    simple: require(\"./simple.js\")\n};\n","/home/travis/build/npmtest/node-npmtest-updtr/node_modules/updtr/lib/reporters/default.js":"\"use strict\";\n\nvar Spinner = require(\"cli-spinner\").Spinner;\nvar unicons = require(\"unicons\");\n\nvar util = require(\"./util\");\n\nfunction defaultReporter(emitter) {\n    var currentLine = \"\";\n    var spinner;\n\n    function logProgress(message) {\n        if (spinner) {\n            spinner.stop();\n        }\n        currentLine = message;\n        spinner = new Spinner(message + \"... \".grey + \"%s \");\n        spinner.setSpinnerString(19);\n        spinner.start();\n    }\n\n    function finishProgress(message) {\n        if (spinner) {\n            spinner.stop(true);\n        }\n        if (message) {\n            console.log.apply(console, arguments);\n        } else {\n            console.log(currentLine);\n        }\n        currentLine = \"\";\n    }\n\n    function logUpdateProgress(event, status, message) {\n        var progress = event.current + \"/\" + event.total;\n        var circle = unicons.cli(\"circle\");\n        var name = event.info.name;\n\n        if (status === \"error\") {\n            circle = circle.red;\n            name = name.red;\n        } else if (status === \"success\") {\n            circle = circle.green;\n        } else {\n            circle = circle.grey;\n        }\n\n        logProgress([\n            progress.grey,\n            \"\\t\",\n            circle,\n            name,\n            message\n        ].join(\" \"));\n    }\n\n    // Activate colors by extending String.prototype\n    require(\"colors\");\n\n    emitter.on(\"init\", function () {\n        logProgress(\"Looking for outdated modules\");\n    });\n    emitter.on(\"noop\", function () {\n        finishProgress(\"No outdated modules found. Are they installed?\");\n    });\n    emitter.on(\"modulesMissing\", function (event) {\n        finishProgress(util.modulesMissingMessage(event));\n    });\n    emitter.on(\"outdated\", function (event) {\n        finishProgress(\"Found %s outdated module%s\", event.total, event.total === 1 ? \"\" : \"s\");\n        console.log(\"\");\n        console.log(\"Starting to update your modules\" + \"...\".grey);\n    });\n    emitter.on(\"updating\", function (event) {\n        var info = event.info;\n\n        logUpdateProgress(event, \"pending\", \"updating \".grey + info.current + \" \" + unicons.cli(\"arrowRight\").grey + \" \" + info.updateTo);\n    });\n    emitter.on(\"testing\", function (event) {\n        logUpdateProgress(event, \"pending\", \"testing\".grey);\n    });\n    emitter.on(\"rollback\", function (event) {\n        logUpdateProgress(event, \"error\", \"rolling back\".grey);\n    });\n    emitter.on(\"rollbackDone\", function (event) {\n        var info = event.info;\n\n        logUpdateProgress(event, \"error\", info.updateTo + \" failed\".grey);\n        finishProgress();\n    });\n    emitter.on(\"testStdout\", function (event) {\n        console.log(event.testStdout);\n    });\n    emitter.on(\"updatingDone\", function (event) {\n        var info = event.info;\n\n        logUpdateProgress(event, \"success\", info.updateTo + \" success\".grey);\n        finishProgress();\n    });\n    emitter.on(\"finished\", function () {\n        console.log(\"\");\n        console.log(\"Finished\");\n    });\n}\n\nmodule.exports = defaultReporter;\n","/home/travis/build/npmtest/node-npmtest-updtr/node_modules/updtr/lib/reporters/util.js":"\"use strict\";\n\nfunction modulesMissingMessage(event) {\n    var moduleList = event.infos.map(function (info) {\n        return info.name;\n    }).join(\", \");\n\n    return \"Some modules are not installed: \" + moduleList +\n           \". Please install with 'npm install' first.\";\n}\n\nmodule.exports = {\n    modulesMissingMessage: modulesMissingMessage\n};\n\n","/home/travis/build/npmtest/node-npmtest-updtr/node_modules/updtr/lib/reporters/shy.js":"\"use strict\";\n\nfunction shyReporter() {\n}\n\nmodule.exports = shyReporter;\n","/home/travis/build/npmtest/node-npmtest-updtr/node_modules/updtr/lib/reporters/simple.js":"\"use strict\";\n\nvar unicons = require(\"unicons\");\n\nvar util = require(\"./util\");\n\nfunction defaultReporter(emitter) {\n    var currentLine = \"\";\n\n    function logProgress(message) {\n        currentLine = message;\n        console.log(message + \"... \".grey);\n    }\n\n    function finishProgress(message) {\n        if (message) {\n            console.log.apply(console, arguments);\n        } else {\n            console.log(currentLine);\n        }\n        currentLine = \"\";\n    }\n\n    function logUpdateProgress(event, status, message) {\n        var progress = event.current + \"/\" + event.total;\n        var circle = unicons.cli(\"circle\");\n        var name = event.info.name;\n\n        if (status === \"error\") {\n            circle = circle.red;\n            name = name.red;\n        } else if (status === \"success\") {\n            circle = circle.green;\n        } else {\n            circle = circle.grey;\n        }\n\n        logProgress([\n            progress.grey,\n            \"\\t\",\n            circle,\n            name,\n            message\n        ].join(\" \"));\n    }\n\n    // Activate colors by extending String.prototype\n    require(\"colors\");\n\n    emitter.on(\"init\", function () {\n        logProgress(\"Looking for outdated modules\");\n    });\n    emitter.on(\"noop\", function () {\n        finishProgress(\"No outdated modules found. Are they installed?\");\n    });\n    emitter.on(\"modulesMissing\", function (event) {\n        finishProgress(util.modulesMissingMessage(event));\n    });\n    emitter.on(\"outdated\", function (event) {\n        finishProgress(\"Found %s outdated module%s\", event.total, event.total === 1 ? \"\" : \"s\");\n        console.log(\"\");\n        console.log(\"Starting to update your modules\" + \"...\".grey);\n    });\n    emitter.on(\"updating\", function (event) {\n        var info = event.info;\n\n        logUpdateProgress(event, \"pending\", \"updating \".grey + info.current + \" \" + unicons.cli(\"arrowRight\").grey + \" \" + info.updateTo);\n    });\n    emitter.on(\"testing\", function (event) {\n        logUpdateProgress(event, \"pending\", \"testing\".grey);\n    });\n    emitter.on(\"rollback\", function (event) {\n        logUpdateProgress(event, \"error\", \"rolling back\".grey);\n    });\n    emitter.on(\"rollbackDone\", function (event) {\n        var info = event.info;\n\n        logUpdateProgress(event, \"error\", info.updateTo + \" failed\".grey);\n        console.log(\"\");\n    });\n    emitter.on(\"testStdout\", function (event) {\n        console.log(event.testStdout);\n    });\n    emitter.on(\"updatingDone\", function (event) {\n        var info = event.info;\n\n        logUpdateProgress(event, \"success\", info.updateTo + \" success\".grey);\n        console.log(\"\");\n    });\n    emitter.on(\"finished\", function () {\n        console.log(\"\");\n        console.log(\"Finished\");\n    });\n}\n\nmodule.exports = defaultReporter;\n"}